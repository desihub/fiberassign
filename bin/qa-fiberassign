#!/usr/bin/env python

"""
QA for fiberassign
"""

from __future__ import absolute_import, division, print_function
import sys, os
import argparse
from collections import Counter

import numpy as np
from astropy.table import Table, vstack
from astropy.io import fits
import fitsio
from desitarget.targetmask import desi_mask
import desimodel.io

from desitarget.cmx.cmx_targetmask import cmx_mask

from desitarget.sv1.sv1_targetmask import desi_mask as sv1_mask

from desitarget.targets import main_cmx_or_sv

from fiberassign.targets import (TARGET_TYPE_SKY, TARGET_TYPE_SAFE, desi_target_type,
                      default_target_masks, default_survey_target_masks)



parser = argparse.ArgumentParser()
parser.add_argument("--targets", type=str,  help="input data")
parser.add_argument("--verbose", action="store_true",  help="print non-error info per tile")
parser.add_argument("tilefiles", type=str, nargs='+', help="fiber assign tile files")

args = parser.parse_args()

fibermap = desimodel.io.load_focalplane()
fiberpos = fibermap[0] 
fiberpos.sort('FIBER')
fiber_locations = sorted(zip(fiberpos['FIBER'], fiberpos['LOCATION']))

#sky_mask = desi_mask.SKY
#std_mask = 0
#for name in ['STD', 'STD_FSTAR', 'STD_WD',
#             'STD_FAINT', 'STD_FAINT_BEST',
#             'STD_BRIGHT', 'STD_BRIGHT_BEST']:
#    if name in desi_mask.names():
#        std_mask |= desi_mask[name]

#- TODO: take hardcoded from src/global.h into config file
stuck_mask = 2**1
broken_mask = 2**2

nfail = 0
assigned = list()
covered = list()
n5k = np.arange(5000, dtype=int)
for filename in args.tilefiles:

   #SE tile-*.fits is being read via Table, but the header needs
   #    to be extracted via fitsio for getting the "survey" string; in assign.py style: 
    
    fd = fitsio.FITS(filename, "r")
    fbtargets = fd["TARGETS"].read()

    header = None
    if "FASSIGN" in fd:
        
        header = fd["FASSIGN"].read_header()
    else:
        header = fd["FIBERASSIGN"].read_header()
    

    survey = None
    if "FA_SURV" in header:
        
        survey = str(header["FA_SURV"]).rstrip()

    
    sciencemask = None
    stdmask = None
    skymask = None
    excludemask = None
    gaia_stdmask = None
    col=None
    if survey is not None:
            
        sciencemask, stdmask, skymask, suppskymask, safemask, excludemask, gaia_stdmask = \
                default_survey_target_masks(survey)
  
    else:
        fsurvey, col, sciencemask, stdmask, skymask, suppskymask, safemask, \
                excludemask, gaia_stdmask = default_target_masks(fbtargets)
        survey = fsurvey




    fa = Table.read(filename, 'FIBERASSIGN')    
    fa.sort('FIBER')
    assigned.append(fa)
    try:
        potential = Table.read(filename, 'POTENTIAL_ASSIGNMENTS')
    except KeyError:
        potential = Table.read(filename, 'POTENTIAL')

    covered.append(np.unique(potential['TARGETID']))

    errors = list()

    if len(np.unique(fa['FIBER'])) != 5000:
        errors.append('Repeated fiber numbers')

    if len(np.unique(fa['LOCATION'])) != 5000:
        errors.append('Repeated location numbers')

    #- There should be a faster way to do this
    for fiber, targetid in zip(fa['FIBER'], fa['TARGETID']):
        if targetid<0:
            continue
        ii = (potential['FIBER'] == fiber)
        if targetid not in potential['TARGETID'][ii]:
            errors.append('Assigned targets not in covered targets list')
            break


    nsky_total = 0
    nstdstar_total = 0

    for petal in range(10):
        ii = (fa['FIBER'] // 500) == petal

        nstd = np.count_nonzero(fa['FA_TARGET'][ii] & stdmask)
        nsky = np.count_nonzero(fa['FA_TARGET'][ii] & skymask)


        nsky_total += nsky
        nstdstar_total += nstd

        if nstd < 10:
            errors.append('Petal {} has {}/10 stdstars'.format(petal, nstd))
        if nsky < 40:
            errors.append('Petal {} has {}/40 sky'.format(petal, nsky))


    if survey == "main":

        num_no_desitarget = np.count_nonzero(fa['DESI_TARGET'] == 0)
        bitmask = 'DESI_TARGET'

    elif survey == "cmx":
                
        num_no_desitarget = np.count_nonzero(fa['CMX_TARGET'] == 0)
        bitmask = 'CMX_TARGET'


    elif survey == "sv1":
        
        num_no_desitarget = np.count_nonzero(fa['SV1_DESI_TARGET'] == 0)
        bitmask = 'SV1_DESI_TARGET'

    ### SE no error should be raised if only assigned SKY fibers have CMX/SV/DESI_TARGET == 0 
    if num_no_desitarget > nsky_total:
        errors.append('{} non-SKY fibers with {}=0'.format(num_no_desitarget,bitmask))

    is_stuck = ((fa['FIBERSTATUS'] & stuck_mask) != 0)
    is_broken = ((fa['FIBERSTATUS'] & broken_mask) != 0)
    is_unassigned = (fa['TARGETID'] < 0)
    n_good_unassigned = np.count_nonzero(is_unassigned & ~(is_stuck | is_broken))
    if n_good_unassigned > 0:
        errors.append('{} unassigned good fibers'.format(n_good_unassigned))

    tx = fa['TARGETID'][fa['TARGETID']>0]
    if len(tx) != len(np.unique(tx)):
        errors.append('{} repeated TARGETID'.format(
            len(tx) - len(np.unique(tx))))
    
    ### SE: Only match the FIBER,LOCATION tuples for fiberIDs <5000 until ETC fibers get actual FIBERID number \
    ###     not -1;  though the next 6 lines do deal with matching locations aside from associated FIBERIDs

    #fiber_locations = sorted(zip(fiberpos[fiberpos['FIBER']<5000]['FIBER'], fiberpos[fiberpos['FIBER']<5000]['LOCATION']))
    #if sorted(zip(fa[fa['FIBER']<5000]['FIBER'], fa[fa['FIBER']<5000]['LOCATION'])) != fiber_locations:
    #    errors.append('fiber:location map incorrect')

    ### New focalplane layout does not have the same size as fa columns: 5020 vs 5000
    maploc = list(fiberpos['LOCATION'])
    faloc = set(list(fa['LOCATION']))
    ind = np.asarray([i in faloc for i in maploc])
    matched_fiberpos = fiberpos[ind]
    
    if len(matched_fiberpos) != len(faloc):   
        errors.append('fiber:location map incorrect')

     
    ii = fa['TARGETID'] >= 0
    fiberpos = matched_fiberpos
    if 'DESIGN_X' in fa.colnames:
        #- old name
        dx = (fa['DESIGN_X'][ii] - fiberpos['X'][ii])
        dy = (fa['DESIGN_Y'][ii] - fiberpos['Y'][ii])
    else:
        #- new name
        dx = (fa['FIBERASSIGN_X'][ii] - fiberpos['OFFSET_X'][ii])
        dy = (fa['FIBERASSIGN_Y'][ii] - fiberpos['OFFSET_Y'][ii])

    r = np.sqrt(dx**2 + dy**2)
    if np.max(r) > 6:
        errors.append('Fibers assigned to more than 6mm from positioner center')


    #- Print any errors
    if len(errors) == 0:
        print('{} - OK'.format(filename))
    else:
        nfail += 1
        print('{} - ERROR'.format(filename))
        for err in errors:
            print('    {}'.format(err))

    #- Then print non-error informational stats
    if args.verbose:
        n_stuck = np.count_nonzero(is_stuck)
        n_broken = np.count_nonzero(is_broken)
        print('    {} stuck, {} broken, {} sky, {} stdstars'.format(
            n_stuck, n_broken, nsky_total, nstdstar_total))


print('{}/{} tiles had errors'.format(nfail, len(args.tilefiles)))

if args.targets is None:
    print('Option --targets not specified; stopping')
    sys.exit(0)

#- Clear metadata keywords to avoid stacking name collisions
for fa in assigned:
    fa.meta.clear()

assigned = vstack(assigned)
unique_assigned_targetids = np.unique(assigned['TARGETID'])
covered = np.concatenate(covered)

targets = Table.read(args.targets)
#- TODO: count and remove sky targets

### SE: Is the check below necessary? fiberassign crashes if there is duplicate TARGETID so there would not be any fiberassign outputs for which we would run the qa-fiberassign 
if len(targets) != len(np.unique(targets['TARGETID'])):
    print('ERROR: target catalog has repeated TARGETIDs')

print('----------')
ntargets = len(targets)
iicovered = np.in1d(targets['TARGETID'], covered)
ncovered = np.count_nonzero(iicovered)
ntiles = len(args.tilefiles)
pcovered = 100.0*ncovered/ntargets
print('{:.1f}% targets ({}/{}) covered by {} tiles'.format(
    pcovered, ncovered, ntargets, ntiles))
if ncovered < ntargets:
    print('  Dropping {} targets not covered by any tile:fiber'.format(ntargets-ncovered))
    targets = targets[iicovered]
else:
    print('  All targets covered by at least one tile:fiber')

#- Drop covered IDs that are not in targets list (presumably sky and standards)
iitarg = np.in1d(covered, targets['TARGETID'])
covered = covered[iitarg]

#-----
if not np.all( np.in1d(covered, targets['TARGETID']) ):
    ii = np.in1d(covered, targets['TARGETID'])
    extra = np.unique(covered[ii])
    print('ERROR: {} targets in coverage list but not in target list'.format(len(extra)))

#-----
print('Fiber assignment efficiency')
objlist=[]

if survey == "main":
          
    objlist = ['ELG', 'LRG', 'QSO', 'MWS_ANY', 'BGS_ANY']
    for objtype in objlist:
        ii = (targets['DESI_TARGET'] & desi_mask.mask(objtype)) != 0
        ntot = np.count_nonzero(ii)
        if ntot == 0:
            print('  {:8s}  no targets'.format(objtype))
        else:
            nx = np.count_nonzero(np.in1d(targets['TARGETID'][ii],
                                      assigned['TARGETID']))
            print('  {:8s} {:5.1f}%  ({}/{})'.format(objtype,100*nx/ntot,nx,ntot))

elif survey == "cmx":

    objlist = ['SV0_ELG', 'SV0_LRG', 'SV0_QSO', 'SV0_MWS', 'SV0_BGS']
    for objtype in objlist:
            
        ii = (targets['CMX_TARGET'] & cmx_mask.mask(objtype)) != 0
        ntot = np.count_nonzero(ii)
        if ntot == 0:
            print('  {:8s}  no targets'.format(objtype))
        else:
            nx = np.count_nonzero(np.in1d(targets['TARGETID'][ii],
                    assigned['TARGETID']))
            print('  {:8s} {:5.1f}%  ({}/{})'.format(objtype,100*nx/ntot,nx,ntot))


elif survey == "sv1":

    objlist = ['ELG', 'LRG', 'QSO', 'MWS_ANY', 'BGS_ANY']
    for objtype in objlist:

        ii = (targets['SV1_DESI_TARGET'] & sv1_mask.mask(objtype)) != 0
        ntot = np.count_nonzero(ii)
        if ntot == 0:
            print('  {:8s}  no targets'.format(objtype))
        else:
            nx = np.count_nonzero(np.in1d(targets['TARGETID'][ii],
                                      assigned['TARGETID']))
            print('  {:8s} {:5.1f}%  ({}/{})'.format(objtype,100*nx/ntot,nx,ntot))


print('\n---------------------------------------------------------------')
print("WORK IN PROGRESS")
print("The stats below mix dark/bright/gray without considering that a")
print("dark target can't be observed on a bright tile")
print('---------------------------------------------------------------')

#-----
#- Number of times each target was covered
nt = Counter(covered)
#- histogram of how many targets were covered how many times
cn = Counter(nt.values())
print()
print('Percent of targets covered exactly N times')
print('            1     2     3     4     5     6     7     8     9')
print('        ', end='')
for i in range(1,10):
    pcov = 100 * cn[i] / len(targets)
    print('{:6.1f}'.format(pcov), end='')
print()

print()
print('Percent of targets covered at least N times')
print('            1     2     3     4     5     6     7     8     9')
print('        ', end='')
n = len(targets)
for i in range(1,10):
    pcov = 100 * n / len(targets)
    n -= cn[i]
    print('{:6.1f}'.format(pcov), end='')
print()

#-----
#- Efficiency for assignment as a function of coverage
print()
print('Assignment probability if covered exactly N times')
print('            1     2     3     4     5     6     7     8     9')

objlist=[]

if survey == "main":

    objlist = ['ELG', 'LRG', 'QSO', 'MWS_ANY', 'BGS_ANY']
    for objtype in objlist:
        print('{:8s}'.format(objtype), end='')
        ii = (targets['DESI_TARGET'] & desi_mask.mask(objtype)) != 0

        tx = targets['TARGETID'][ii]
        if len(tx) == 0:
            print('no targets')
            continue
        
        #- nt: coverage counts for just those targets
        jj = np.in1d(covered, tx)
        ntx = Counter(covered[jj])
        #- Count how many targets are covered n times for this objtype
        ntx_keys = np.asarray(list(ntx.keys()))
        ntx_values = np.asarray(list(ntx.values()))

        for n in range(1,10):
            #- Targets covered n or less times
            kk = (ntx_values == n)
            if np.count_nonzero(kk) > 0:
                ncovered = len(np.unique(ntx_keys[kk]))
                nassigned = np.count_nonzero(np.in1d(unique_assigned_targetids,
                                                 ntx_keys[kk]))
                pobs = 100.0 * nassigned / ncovered
                print('{:6.1f}'.format(pobs), end='')
            else:
                    print('   ---', end='')

        print()
               
               
elif survey == "cmx":

    objlist = ['SV0_ELG', 'SV0_LRG', 'SV0_QSO', 'SV0_MWS', 'SV0_BGS']
    for objtype in objlist:
        print('{:8s}'.format(objtype), end='')

        ii = (targets['CMX_TARGET'] & cmx_mask.mask(objtype)) != 0
        tx = targets['TARGETID'][ii]
        if len(tx) == 0:
            print('no targets')
            continue

        
        #- nt: coverage counts for just those targets
        jj = np.in1d(covered, tx)
        ntx = Counter(covered[jj])
        #- Count how many targets are covered n times for this objtype
        ntx_keys = np.asarray(list(ntx.keys()))
        ntx_values = np.asarray(list(ntx.values()))
        for n in range(1,10):
            #- Targets covered n or less times
            kk = (ntx_values == n)
            if np.count_nonzero(kk) > 0:
                ncovered = len(np.unique(ntx_keys[kk]))
                nassigned = np.count_nonzero(np.in1d(unique_assigned_targetids,
                                                 ntx_keys[kk]))
                pobs = 100.0 * nassigned / ncovered
                print('{:6.1f}'.format(pobs), end='')
            else:
                print('   ---', end='')

        print()

              


elif survey == "sv1":

    objlist = ['ELG', 'LRG', 'QSO', 'MWS_ANY', 'BGS_ANY', 'SCND_ANY']
    for objtype in objlist:
        print('{:8s}'.format(objtype), end='')

        ii = (targets['SV1_DESI_TARGET'] & sv1_mask.mask(objtype)) != 0
        tx = targets['TARGETID'][ii]
        if len(tx) == 0:
            print('no targets')
            continue
        
        #- nt: coverage counts for just those targets
        jj = np.in1d(covered, tx)
        ntx = Counter(covered[jj])
        #- Count how many targets are covered n times for this objtype
        ntx_keys = np.asarray(list(ntx.keys()))
        ntx_values = np.asarray(list(ntx.values()))

        for n in range(1,10):
            #- Targets covered n or less times
            kk = (ntx_values == n)
            if np.count_nonzero(kk) > 0:
                ncovered = len(np.unique(ntx_keys[kk]))
                nassigned = np.count_nonzero(np.in1d(unique_assigned_targetids,
                                                 ntx_keys[kk]))
                pobs = 100.0 * nassigned / ncovered
                print('{:6.1f}'.format(pobs), end='')
            else:
                print('   ---', end='')

        print()




